// === PLANILLA DIARIA (Refactor ERP Conectada a DB) ===
console.log("planilla.js cargado");

// Esta vista se carga dinÃ¡micamente dentro de una pestaÃ±a.
// Por eso, siempre consultamos el DOM dentro de las funciones
// en lugar de capturar referencias globales antes de tiempo.

// Fecha actual
let currentDate = new Date();

// === RENDERIZAR CALENDARIO ===
async function renderCalendar(date) {
  const calendarGrid = document.getElementById("calendarGrid");
  const calendarTitle = document.getElementById("calendarTitle");
  if (!calendarGrid || !calendarTitle) return;

  const year = date.getFullYear();
  const month = date.getMonth();

  const monthNames = [
    "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
    "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
  ];

  calendarTitle.textContent = `${monthNames[month]} de ${year}`;

  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  let startDay = firstDay.getDay();
  if (startDay === 0) startDay = 7;

  calendarGrid.innerHTML = "";

  // DÃ­as con datos
  const firstDate = `${year}-${String(month + 1).padStart(2, "0")}-01`;
  const lastDate = `${year}-${String(month + 1).padStart(2, "0")}-${String(lastDay.getDate()).padStart(2, "0")}`;
  let diasConDatos = [];

  try {
    const res = await fetch(`/api/reparaciones_planilla/rango?inicio=${firstDate}&fin=${lastDate}`, { credentials: 'include' });
    if (res.ok) {
      const data = await res.json();
      diasConDatos = data.map(r => new Date(r.fecha).getDate());
    }
  } catch (err) {
    console.warn("No se pudieron cargar dÃ­as con datos:", err);
  }

  // Espacios vacÃ­os
  for (let i = 1; i < startDay; i++) {
    const empty = document.createElement("div");
    empty.classList.add("day", "empty");
    calendarGrid.appendChild(empty);
  }

  // DÃ­as del mes
  for (let d = 1; d <= lastDay.getDate(); d++) {
    const cell = document.createElement("div");
    cell.classList.add("day");
    cell.textContent = d;

    const today = new Date();
    if (d === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
      cell.classList.add("today");
    }

    if (diasConDatos.includes(d)) {
      cell.classList.add("has-data");
    }

    cell.addEventListener("click", () => abrirModalPlanilla(`${d}/${month + 1}/${year}`));
    calendarGrid.appendChild(cell);
  }
}

// === ABRIR MODAL PLANILLA Y CONSULTAR DB ===
async function abrirModalPlanilla(fecha) {
  const modalPlanilla = document.getElementById("modal-planilla");
  const fechaPlanillaSpan = document.getElementById("fecha-planilla");
  const tbodyReparaciones = document.getElementById("tbody-reparaciones");
  if (!modalPlanilla || !fechaPlanillaSpan || !tbodyReparaciones) return;

  modalPlanilla.classList.remove("closing");
  const contenido = modalPlanilla.querySelector(".modal-contenido-refactor, .modal-contenido");
  if (contenido) contenido.classList.remove("closing");
  modalPlanilla.style.display = "flex";
  modalPlanilla.classList.add("open");
  fechaPlanillaSpan.textContent = fecha;

  // Limpia la tabla y muestra mensaje de carga
  tbodyReparaciones.innerHTML = `
    <tr><td colspan="7" style="text-align:center; color:#888; padding:12px;">
      <i class="fas fa-spinner fa-spin"></i> Cargando datos...
    </td></tr>
  `;

  // Convertir "9/10/2025" a "2025-10-09"
  const [d, m, y] = fecha.split("/");
  const fechaISO = `${y}-${m.padStart(2, "0")}-${d.padStart(2, "0")}`;

  try {
    console.log(`Consultando /api/reparaciones_planilla?fecha=${fechaISO}`);

    const res = await fetch(`/api/reparaciones_planilla?fecha=${fechaISO}`, { credentials: 'include' });
    const data = await res.json();

    if (!res.ok) throw new Error(data.error || "Error al obtener datos del servidor");

    if (!Array.isArray(data) || data.length === 0) {
      tbodyReparaciones.innerHTML = `
        <tr><td colspan="7" style="text-align:center; color:#666; padding:10px;">
          No hay reparaciones registradas para esta fecha.
        </td></tr>`;
      return;
    }

    // Reemplazar con los nuevos datos
    tbodyReparaciones.innerHTML = data.map(rep => `
      <tr data-id="${rep.id || ''}">
        <td>${rep.cliente || "-"}</td>
        <td>${rep.id_reparacion || "-"}</td>
        <td>${rep.coche_numero || "-"}</td>
        <td>${rep.equipo || "-"}</td>
        <td>${rep.tecnico || "-"}</td>
        <td>${rep.garantia === 'si' ? 'SÃ­' : 'No'}</td>
        <td>${rep.observaciones || "-"}</td>
        <td style="display:none" class="col-hora-inicio">${rep.hora_inicio || ""}</td>
        <td style="display:none" class="col-hora-fin">${rep.hora_fin || ""}</td>
        <td style="display:none" class="col-trabajo">${rep.trabajo || ""}</td>
        <td style="display:none" class="col-id-dota">${rep.id_dota || ""}</td>
        <td style="display:none" class="col-ultimo-reparador-nombre">${rep.ultimo_reparador_nombre || ""}</td>
        <td style="display:none" class="col-resolucion">${rep.resolucion || ""}</td>
      </tr>
    `).join("");

  } catch (err) {
    console.error("Error al cargar planilla:", err);
    tbodyReparaciones.innerHTML = `
      <tr><td colspan="7" style="color:red; text-align:center; padding:10px;">
        Error al conectar con el servidor.
      </td></tr>`;
  }
}

// === CERRAR MODAL ===
function cerrarModalPlanilla() {
  const modalPlanilla = document.getElementById("modal-planilla");
  if (modalPlanilla) smoothCloseModal(modalPlanilla);
}

// Otros modales: Detalle, ReparaciÃ³n, Historial, Grupos, Productos
function cerrarModalDetalle() {
  const el = document.getElementById("modal-detalle");
  if (el) smoothCloseModal(el);
}

function cerrarModalReparacion() {
  const el = document.getElementById("modal-reparacion");
  if (el) smoothCloseModal(el);
}

function cerrarModalHistorial() {
  const el = document.getElementById("modal-historial");
  if (el) smoothCloseModal(el);
}

function cerrarModalGrupos() {
  const el = document.getElementById("modal-grupos");
  if (el) smoothCloseModal(el);
}

function cerrarModalProductos() {
  const el = document.getElementById("modal-productos");
  if (el) smoothCloseModal(el);
}

// Exponer para los botones de cerrar en HTML inline
window.cerrarModalPlanilla = cerrarModalPlanilla;
window.cerrarModalDetalle = cerrarModalDetalle;
window.cerrarModalReparacion = cerrarModalReparacion;
window.cerrarModalHistorial = cerrarModalHistorial;
window.cerrarModalGrupos = cerrarModalGrupos;
window.cerrarModalProductos = cerrarModalProductos;

// Handlers globales: overlay click + Escape (solo una vez)
function bindGlobalModalHandlers() {
  if (window.__planillaGlobalHandlersBound) return;
  window.__planillaGlobalHandlersBound = true;

  // Cerrar al clickear fuera del contenido
  document.addEventListener("click", (e) => {
    const modales = [
      "modal-planilla",
      "modal-detalle",
      "modal-reparacion",
      "modal-historial",
      "modal-grupos",
      "modal-productos",
    ];
    for (const id of modales) {
      const modal = document.getElementById(id);
      if (!modal || modal.style.display !== "flex") continue;
      const contenido = modal.querySelector(".modal-contenido, .modal-contenido-refactor");
      if (e.target === modal && !contenido?.contains(e.target)) {
        smoothCloseModal(modal);
      }
    }
  });

  // Cerrar con tecla Escape
  document.addEventListener("keydown", (e) => {
    if (e.key !== "Escape") return;
    const abiertos = document.querySelectorAll(
      "#modal-planilla,#modal-detalle,#modal-reparacion,#modal-historial,#modal-grupos,#modal-productos"
    );
    abiertos.forEach(modal => {
      if (modal && (modal.style.display === "flex" || modal.style.display === "block")) {
        smoothCloseModal(modal);
      }
    });
  });
}

// Cierre suave del modal (fade-out)
function smoothCloseModal(modal) {
  if (!modal) return;
  const content = modal.querySelector(".modal-contenido-refactor, .modal-contenido");
  modal.classList.add("closing");
  if (content) content.classList.add("closing");
  setTimeout(() => {
    modal.style.display = "none";
    modal.classList.remove("closing", "open");
    if (content) content.classList.remove("closing");
    // Limpia el campo de bÃºsqueda al cerrar el modal de historial
    if (modal.id === "modal-historial") {
      const buscador = document.getElementById("buscar-reparacion");
      if (buscador) buscador.value = "";
    }
  }, 180);
}

// === NAVEGACIÃ“N ENTRE MESES ===
function bindMonthNavigation() {
  const prevMonthBtn = document.getElementById("prevMonth");
  const nextMonthBtn = document.getElementById("nextMonth");
  if (prevMonthBtn) prevMonthBtn.onclick = () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar(currentDate);
  };
  if (nextMonthBtn) nextMonthBtn.onclick = () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar(currentDate);
  };
}

// === BOTONES DE ACCIÃ“N Y SELECCIÃ“N ===
function bindPlanillaActions() {
  const tbodyReparaciones = document.getElementById("tbody-reparaciones");
  const btnVerDetalle = document.getElementById("btn-ver-detalle");
  const btnAgregar = document.getElementById("btn-agregar-rep");
  const btnModificar = document.getElementById("btn-modificar-rep");
  const btnEliminar = document.getElementById("btn-eliminar-rep");

  if (!tbodyReparaciones) return;

  // Estado: fila seleccionada
  let reparacionSeleccionada = null;

  // DelegaciÃ³n: seleccionar fila de la tabla
  tbodyReparaciones.onclick = (e) => {
    const fila = e.target.closest("tr");
    if (!fila) return;
    document.querySelectorAll("#tbody-reparaciones tr").forEach(tr => tr.classList.remove("selected"));
    fila.classList.add("selected");
    const celdas = fila.querySelectorAll("td");
    reparacionSeleccionada = {
      id: fila.dataset.id || '',
      cliente: celdas[0]?.textContent.trim(),
      id_reparacion: celdas[1]?.textContent.trim(),
      coche: celdas[2]?.textContent.trim(),
      equipo: celdas[3]?.textContent.trim(),
      tecnico: celdas[4]?.textContent.trim(),
      garantia: celdas[5]?.textContent.trim(),
      observaciones: celdas[6]?.textContent.trim(),
      hora_inicio: fila.querySelector('.col-hora-inicio')?.textContent.trim() || '',
      hora_fin: fila.querySelector('.col-hora-fin')?.textContent.trim() || '',
      trabajo: fila.querySelector('.col-trabajo')?.textContent.trim() || '',
      id_dota: fila.querySelector('.col-id-dota')?.textContent.trim() || '',
      ultimo_reparador_nombre: fila.querySelector('.col-ultimo-reparador-nombre')?.textContent.trim() || '',
      resolucion: fila.querySelector('.col-resolucion')?.textContent.trim() || '',
    };
  };

  if (btnVerDetalle) btnVerDetalle.onclick = () => {
    if (!reparacionSeleccionada) {
      alert("Selecciona una reparaciÃ³n primero.");
      return;
    }
    document.getElementById("modal-detalle").style.display = "flex";
    document.getElementById("detalle-cliente").textContent = reparacionSeleccionada.cliente;
    document.getElementById("detalle-id-reparacion").textContent = reparacionSeleccionada.id_reparacion;
    document.getElementById("detalle-coche").textContent = reparacionSeleccionada.coche;
    document.getElementById("detalle-equipo").textContent = reparacionSeleccionada.equipo;
    document.getElementById("detalle-tecnico").textContent = reparacionSeleccionada.tecnico;
    document.getElementById("detalle-garantia").textContent = reparacionSeleccionada.garantia;
    document.getElementById("detalle-observaciones").textContent = reparacionSeleccionada.observaciones;
    const horaIni = document.getElementById("detalle-hora-inicio");
    const horaFin = document.getElementById("detalle-hora-fin");
    const trabajoEl = document.getElementById("detalle-trabajo");
    if (horaIni) horaIni.textContent = reparacionSeleccionada.hora_inicio || '-';
    if (horaFin) horaFin.textContent = reparacionSeleccionada.hora_fin || '-';
    if (trabajoEl) trabajoEl.textContent = reparacionSeleccionada.trabajo || '-';

    // Cargar datos de garantÃ­a (si aplica) y mostrarlos en la ficha
    const extra = document.getElementById('detalle-garantia-extra');
    const setExtra = (show, datos) => {
      if (!extra) return;
      extra.style.display = show ? '' : 'none';
      if (show && datos) {
        const elIdDota = document.getElementById('detalle-id-dota');
        const elUlt = document.getElementById('detalle-ultimo-reparador');
        const elRes = document.getElementById('detalle-resolucion');
        if (elIdDota) elIdDota.textContent = datos.id_dota || '-';
        if (elUlt) elUlt.textContent = datos.ultimo_reparador_nombre || '-';
        if (elRes) elRes.textContent = datos.resolucion || '-';
      }
    };

    // Determinar si es garantÃ­a desde el texto mostrado
    const esGarantia = (reparacionSeleccionada.garantia || '').toLowerCase().startsWith('s');
    if (!esGarantia) {
      setExtra(false);
    } else {
      // Traer historial de esa reparaciÃ³n para obtener campos extra
      (async () => {
        try {
          const id = (reparacionSeleccionada.id_reparacion || '').trim();
          if (!id) { setExtra(true, { id_dota: '-', ultimo_reparador_nombre: '-', resolucion: '-' }); return; }
          const res = await fetch(`/api/reparaciones_planilla/historial/${encodeURIComponent(id)}`, { credentials: 'include' });
          const data = await res.json();
          const first = Array.isArray(data) && data.length > 0 ? data[0] : null;
          setExtra(true, first || {});
        } catch (err) {
          console.warn('No se pudieron cargar datos de garantÃ­a:', err);
          setExtra(true, { id_dota: '-', ultimo_reparador_nombre: '-', resolucion: '-' });
        }
      })();
    }
  };

  if (btnAgregar) btnAgregar.onclick = () => {
    document.getElementById("modal-reparacion").style.display = "flex";
    document.getElementById("form-reparacion").reset();
    prepararSelectClientes();
    prepararSelectFamilias();
    prepararSelectTecnicos();
    bindFormNuevaReparacion();
  };

  if (btnModificar) btnModificar.onclick = () => {
    if (!reparacionSeleccionada) {
      alert("Selecciona una reparaciÃ³n para modificar.");
      return;
    }
    document.getElementById("modal-reparacion").style.display = "flex";
    document.querySelector("input[name='id_reparacion']").value = reparacionSeleccionada.id_reparacion;
    document.querySelector("input[name='coche_numero']").value = reparacionSeleccionada.coche;
    document.querySelector("textarea[name='observaciones']").value = reparacionSeleccionada.observaciones;
    const hi = document.querySelector("input[name='hora_inicio']");
    const hf = document.querySelector("input[name='hora_fin']");
    const tr = document.querySelector("textarea[name='trabajo']");
    if (hi) hi.value = reparacionSeleccionada.hora_inicio || '';
    if (hf) hf.value = reparacionSeleccionada.hora_fin || '';
    if (tr) tr.value = reparacionSeleccionada.trabajo || '';

    // GarantÃ­a: mostrar datos extra (si los tenemos) sin pedir al backend
    const extra = document.getElementById('detalle-garantia-extra');
    if (extra) {
      const esGarantia = (reparacionSeleccionada.garantia || '').toLowerCase().startsWith('s');
      extra.style.display = esGarantia ? '' : 'none';
      if (esGarantia) {
        const elIdDota = document.getElementById('detalle-id-dota');
        const elUlt = document.getElementById('detalle-ultimo-reparador');
        const elRes = document.getElementById('detalle-resolucion');
        if (elIdDota) elIdDota.textContent = reparacionSeleccionada.id_dota || '-';
        if (elUlt) elUlt.textContent = reparacionSeleccionada.ultimo_reparador_nombre || '-';
        if (elRes) elRes.textContent = reparacionSeleccionada.resolucion || '-';
      }
    }
    prepararSelectClientes();
    prepararSelectFamilias();
    prepararSelectTecnicos();
    bindFormNuevaReparacion();
  };

  if (btnEliminar) btnEliminar.onclick = async () => {
    if (!reparacionSeleccionada) {
      alert("Selecciona una reparaciÃ³n para eliminar.");
      return;
    }
    const confirmar = confirm(`Â¿Eliminar la reparaciÃ³n ${reparacionSeleccionada.id_reparacion}?`);
    if (!confirmar) return;
    try {
      const res = await fetch(`/api/reparaciones_planilla/${reparacionSeleccionada.id_reparacion}`, { method: "DELETE" });
      const data = await res.json();
      if (res.ok) {
        alert("ReparaciÃ³n eliminada correctamente.");
        const fechaPlanillaSpan = document.getElementById("fecha-planilla");
        abrirModalPlanilla(fechaPlanillaSpan?.textContent || "");
      } else {
        alert(`Error al eliminar: ${data.error || "Desconocido"}`);
      }
    } catch (err) {
      console.error("Error al eliminar:", err);
      alert("Error al eliminar la reparaciÃ³n.");
    }
  };
}

// === REPUESTOS: selector de grupos y productos ===
function bindRepuestosPicker() {
  const btn = document.getElementById("btn-seleccionar-repuesto");
  if (!btn) return;

  btn.addEventListener("click", async () => {
    await abrirModalGrupos();
  });

  // DelegaciÃ³n: seleccionar un grupo
  const tbodyGrupos = document.getElementById("tbody-grupos");
  if (tbodyGrupos && !tbodyGrupos._boundPicker) {
    tbodyGrupos._boundPicker = true;
    tbodyGrupos.addEventListener("click", async (e) => {
      const tr = e.target.closest("tr[data-id]");
      if (!tr) return;
      const grupoId = tr.dataset.id;
      const grupoDesc = tr.dataset.desc || "";
      await abrirModalProductos(grupoId, grupoDesc);
    });
  }

  // DelegaciÃ³n: seleccionar un producto (repuesto)
  const tbodyProds = document.getElementById("tbody-productos");
  if (tbodyProds && !tbodyProds._boundPicker) {
    tbodyProds._boundPicker = true;
    tbodyProds.addEventListener("click", async (e) => {
      const tr = e.target.closest("tr[data-id]");
      if (!tr) return;
      const producto = {
        id: tr.dataset.id,
        codigo: tr.dataset.codigo || "",
        descripcion: tr.dataset.desc || "",
      };
      await abrirModalUsoRepuesto(producto);
    });
  }
}

async function abrirModalGrupos() {
  const modal = document.getElementById("modal-grupos");
  const tbody = document.getElementById("tbody-grupos");
  if (!modal || !tbody) return;
  modal.style.display = "flex";
  tbody.innerHTML = `<tr><td colspan="2" style="text-align:center; padding:10px; color:#888"><i class='fas fa-spinner fa-spin'></i> Cargando grupos...</td></tr>`;
  try {
    const res = await fetch('/api/grupo');
    const data = await res.json();
    if (!res.ok) throw new Error('Error grupos');
    tbody.innerHTML = "";
    (Array.isArray(data) ? data : []).forEach(g => {
      const tr = document.createElement('tr');
      tr.dataset.id = g.id;
      tr.dataset.desc = g.descripcion || '';
      tr.innerHTML = `
        <td><button class="icon-button-erp visualizar" title="Elegir"><i class="fas fa-check"></i></button></td>
        <td>${g.codigo ? `${g.codigo} - ` : ''}${g.descripcion || '-'}</td>
      `;
      tbody.appendChild(tr);
    });
  } catch (e) {
    console.error(e);
    tbody.innerHTML = `<tr><td colspan="2" style="text-align:center; padding:10px; color:#c33">Error al cargar grupos</td></tr>`;
  }
}

async function abrirModalProductos(grupoId, grupoDesc) {
  cerrarModalGrupos();
  const modal = document.getElementById("modal-productos");
  const tbody = document.getElementById("tbody-productos");
  if (!modal || !tbody) return;
  modal.style.display = "flex";
  tbody.innerHTML = `<tr><td colspan="3" style="text-align:center; padding:10px; color:#888"><i class='fas fa-spinner fa-spin'></i> Cargando productos de ${grupoDesc || 'grupo'}...</td></tr>`;
  try {
    const res = await fetch(`/api/productos?grupo_id=${encodeURIComponent(grupoId)}`);
    const data = await res.json();
    if (!res.ok) throw new Error('Error productos');
    tbody.innerHTML = "";
    (Array.isArray(data) ? data : []).forEach(p => {
      const tr = document.createElement('tr');
      tr.dataset.id = p.id;
      tr.dataset.codigo = p.codigo || '';
      tr.dataset.desc = p.descripcion || '';
      tr.innerHTML = `
        <td><button class="icon-button-erp agregar" title="Elegir"><i class="fas fa-plus"></i></button></td>
        <td>${p.descripcion || '-'}</td>
        <td>${p.codigo || '-'}</td>
      `;
      tbody.appendChild(tr);
    });
  } catch (e) {
    console.error(e);
    tbody.innerHTML = `<tr><td colspan="3" style="text-align:center; padding:10px; color:#c33">Error al cargar productos</td></tr>`;
  }
}

// Cerrar modales de grupos y productos
function cerrarModalGrupos() {
  const el = document.getElementById("modal-grupos");
  if (!el) return;
  el.style.display = "none";
}
function cerrarModalProductos() {
  const el = document.getElementById("modal-productos");
  if (!el) return;
  el.style.display = "none";
}
// === USO DE REPUESTO: seleccionar depÃ³sito y cantidad, descontar stock ===
let productoSeleccionadoUso = null;
async function abrirModalUsoRepuesto(producto) {
  productoSeleccionadoUso = producto;
  const modal = document.getElementById('modal-uso-repuesto');
  const selDep = document.getElementById('uso-deposito');
  const inpCant = document.getElementById('uso-cantidad');
  const inpObs = document.getElementById('uso-observacion');
  if (!modal || !selDep || !inpCant) return;
  // cargar depÃ³sitos
  selDep.innerHTML = `<option value="">Cargando depÃ³sitos...</option>`;
  try {
    const res = await fetch('/api/depositos');
    const deps = await res.json();
    selDep.innerHTML = `<option value="">Seleccione</option>`;
    (Array.isArray(deps) ? deps : []).forEach(d => {
      const opt = document.createElement('option');
      opt.value = d.id;
      opt.textContent = d.nombre || `DepÃ³sito ${d.id}`;
      selDep.appendChild(opt);
    });
  } catch (e) {
    console.error(e);
    selDep.innerHTML = `<option value="">(sin depÃ³sitos)</option>`;
  }
  inpCant.value = 1;
  if (inpObs) inpObs.value = '';
  modal.style.display = 'flex';
}

// Bind submit del modal de uso
(function bindUsoFormOnce(){
  const form = document.getElementById('form-uso-repuesto');
  if (!form) { setTimeout(bindUsoFormOnce, 150); return; }
  if (form._bound) return; form._bound = true;
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    try {
      const fd = new FormData(form);
      const deposito_id = fd.get('deposito_id');
      const cantidad = parseInt(fd.get('cantidad') || '1', 10);
      const observacion = fd.get('observacion') || '';
      if (!productoSeleccionadoUso || !deposito_id || !cantidad || cantidad <= 0) {
        alert('Complete depÃ³sito y cantidad vÃ¡lidos');
        return;
      }
      const reparacionInput = document.querySelector("input[name='id_reparacion']");
      const reparacion_id = reparacionInput ? (reparacionInput.value || '').trim() : '';
      const payload = {
        producto_id: productoSeleccionadoUso.id,
        deposito_id,
        tipo: 'SALIDA',
        cantidad,
        observacion,
        reparacion_id: reparacion_id || null,
      };
      const resp = await fetch('/api/stock/movimiento', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await resp.json().catch(()=>({}));
      if (!resp.ok || !data.success) throw new Error(data.error || 'Error movimiento');
      // agregar al textarea trabajo
      const ta = document.getElementById('trabajo');
      if (ta) {
        const linea = `- [${productoSeleccionadoUso.codigo}] ${productoSeleccionadoUso.descripcion} (x${cantidad})`;
        ta.value = (ta.value ? ta.value.trim() + "\n" : "") + linea;
      }
      document.getElementById('modal-uso-repuesto').style.display = 'none';
      cerrarModalProductos();
      productoSeleccionadoUso = null;
      alert('Stock actualizado');
    } catch (err) {
      console.error(err);
      alert('No se pudo registrar el uso del repuesto');
    }
  });
})();
// Exponer para onclick en la vista
window.cerrarModalGrupos = cerrarModalGrupos;
window.cerrarModalProductos = cerrarModalProductos;

// === INICIALIZAR ===
function initPlanilla() {
  const grid = document.getElementById("calendarGrid");
  if (!grid) {
    setTimeout(initPlanilla, 100);
    return;
  }
  bindMonthNavigation();
  renderCalendar(currentDate);
  bindPlanillaActions();
  bindRepuestosPicker();
  bindHistorialSearch();
  bindGlobalModalHandlers();
  prepararSelectClientes();
  prepararSelectFamilias();
  prepararSelectTecnicos();
  bindFormNuevaReparacion();
}

// === Cargar clientes para el modal (externos) ===
async function prepararSelectClientes(){
  const tipo = document.getElementById('cliente_tipo');
  const wrap = document.getElementById('cliente_externo_wrapper');
  const sel = document.getElementById('cliente_id');
  if(!tipo || !wrap || !sel) return;
  const toggle = ()=>{
    if(tipo.value === 'externo'){
      wrap.style.display = '';
      cargarClientesSelect(sel);
    } else {
      wrap.style.display = 'none';
      sel.innerHTML = '<option value="">Seleccione</option>';
    }
  };
  if(!tipo._bound){ tipo._bound = true; tipo.addEventListener('change', toggle); }
  toggle();
}

async function cargarClientesSelect(selectEl){
  try {
    selectEl.innerHTML = '<option value="">Cargando...</option>';
    const res = await fetch('/api/clientes');
    const data = await res.json();
    let lista = Array.isArray(data) ? data : [];
    // Filtrar solo clientes externos si la columna existe
    try {
      lista = lista.filter(c => (c.categoria || 'externo') === 'externo');
    } catch(_e) { /* ignore */ }
    selectEl.innerHTML = '<option value="">Seleccione</option>';
    lista.forEach(c => {
      const opt = document.createElement('option');
      opt.value = c.codigo; // o c.id si existiera
      opt.textContent = `${c.fantasia || c.razon_social || c.codigo}`;
      selectEl.appendChild(opt);
    });
  } catch(err){
    console.error(err);
    selectEl.innerHTML = '<option value="">(sin datos)</option>';
  }
}

// === EnvÃ­o del formulario de Nueva/Editar ReparaciÃ³n ===
function bindFormNuevaReparacion(){
  const form = document.getElementById('form-reparacion');
  if(!form) return;
  if(form._bound) return; // evitar duplicar
  form._bound = true;
  form.addEventListener('submit', async (e)=>{
    e.preventDefault();
    const datos = Object.fromEntries(new FormData(form).entries());

    // ValidaciÃ³n bÃ¡sica de cliente externo
    if ((datos.cliente_tipo || '') === 'externo' && !(datos.cliente_id || '').trim()){
      alert('Selecciona un cliente externo');
      return;
    }

    // Tomar fecha de la planilla actual (dd/mm/yyyy -> yyyy-mm-dd)
    const fechaTxt = document.getElementById('fecha-planilla')?.textContent || '';
    let fechaISO = '';
    try{
      const [d,m,y] = (fechaTxt || '').split('/');
      if(d && m && y){ fechaISO = `${y}-${m.padStart(2,'0')}-${d.padStart(2,'0')}`; }
    }catch{ /* noop */ }
    if(!fechaISO){
      alert('No se pudo determinar la fecha de la planilla');
      return;
    }
    datos.fecha = fechaISO;

    try{
      const res = await fetch('/api/reparaciones_planilla', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(datos)
      });
      const payload = await res.json().catch(()=>({}));
      if(!res.ok) throw new Error(payload.error || 'Error al guardar');

      // Cerrar modal y refrescar planilla del dÃ­a
      document.getElementById('modal-reparacion').style.display = 'none';
      abrirModalPlanilla(fechaTxt);
    }catch(err){
      console.error('Guardar reparaciÃ³n:', err);
      alert('No se pudo guardar la reparaciÃ³n');
    }
  });

  // Toggle de campos extra si garantÃ­a = 'si'
  const selG = document.getElementById('garantia');
  const extra = document.getElementById('garantia-extra-fields');
  if(selG && extra){
    const toggle = ()=> {
      const esGarantia = selG.value === 'si';
      extra.style.display = esGarantia ? '' : 'none';
      if (esGarantia) cargarTecnicosEnSelect('ultimo_reparador');
    };
    if(!selG._bound){ selG._bound = true; selG.addEventListener('change', toggle); }
    toggle();
  }
}

// Cargar tÃ©cnicos en un <select> especÃ­fico (por id)
async function cargarTecnicosEnSelect(selectId){
  try{
    const sel = typeof selectId === 'string' ? document.getElementById(selectId) : selectId;
    if(!sel) return;
    sel.innerHTML = '<option value="">Cargando tÃ©cnicos...</option>';
    const res = await fetch('/api/tecnicos', { credentials: 'include' });
    const data = await res.json();
    const lista = Array.isArray(data) ? data : [];
    sel.innerHTML = '<option value="">Seleccione</option>';
    lista.forEach(t => {
      const opt = document.createElement('option');
      opt.value = t.id;
      opt.textContent = t.nombre || `TÃ©cnico ${t.id}`;
      sel.appendChild(opt);
    });
  }catch(err){
    console.error('Error cargando tÃ©cnicos en select:', err);
    const sel = document.getElementById(selectId);
    if (sel) sel.innerHTML = '<option value="">(sin datos)</option>';
  }
}

// === Cargar familias/equipos ===
async function prepararSelectFamilias(){
  const sel = document.getElementById('familia_id');
  if(!sel) return;
  sel.innerHTML = '<option value="">Cargando equipos...</option>';
  try{
    const res = await fetch('/api/familias');
    const data = await res.json();
    const lista = Array.isArray(data) ? data : [];
    sel.innerHTML = '<option value="">Seleccione un equipo</option>';
    lista.forEach(f => {
      const opt = document.createElement('option');
      opt.value = f.id;
      opt.textContent = (f.codigo ? f.codigo + ' - ' : '') + (f.descripcion || f.nombre || '');
      sel.appendChild(opt);
    });
  }catch(err){
    console.error('Error cargando familias:', err);
    sel.innerHTML = '<option value="">(sin datos)</option>';
  }
}

// === Cargar tÃ©cnicos ===
async function prepararSelectTecnicos(){
  const sel = document.getElementById('tecnico_id');
  if(!sel) return;
  sel.innerHTML = '<option value="">Cargando tÃ©cnicos...</option>';
  try{
    const res = await fetch('/api/tecnicos', { credentials: 'include' });
    const data = await res.json();
    const lista = Array.isArray(data) ? data : [];
    sel.innerHTML = '<option value="">Seleccione tÃ©cnico</option>';
    lista.forEach(t => {
      const opt = document.createElement('option');
      opt.value = t.id;
      opt.textContent = t.nombre || `TÃ©cnico ${t.id}`;
      sel.appendChild(opt);
    });
  }catch(err){
    console.error('Error cargando tÃ©cnicos:', err);
    sel.innerHTML = '<option value="">(sin datos)</option>';
  }
}

// Si la vista ya existe (recarga directa) o cuando se cargue dinÃ¡micamente
if (document.getElementById("calendarGrid")) {
  initPlanilla();
} else {
  document.addEventListener("view:changed", (e) => {
    if (e.detail === "planilla") {
      setTimeout(initPlanilla, 100);
    }
  });
}

// === BUSCADOR DE HISTORIAL POR ID_REPARACION ===
function bindHistorialSearch() {
  const input = document.getElementById("buscar-reparacion");
  const btn = document.getElementById("btn-buscar-historial");
  if (!input || !btn) return;

  const buscar = async () => {
    const id = (input.value || "").trim();
    if (!id) return alert("IngresÃ¡ un ID de reparaciÃ³n.");
    try {
      // Mostrar modal y estado de carga
      const modal = document.getElementById("modal-historial");
      const tbody = document.getElementById("tbody-historial");
      if (tbody) tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding:10px; color:#666"><i class='fas fa-spinner fa-spin'></i> Buscando...</td></tr>`;
      if (modal) modal.style.display = "flex";

      const res = await fetch(`/api/reparaciones_planilla/historial/${encodeURIComponent(id)}`, { credentials: 'include' });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Error al buscar historial");

      // Encabezado del modal
      const first = Array.isArray(data) && data.length > 0 ? data[0] : null;
      document.getElementById("historial-id")?.replaceChildren(document.createTextNode(id));
      document.getElementById("historial-cliente")?.replaceChildren(document.createTextNode(first?.cliente || "-"));
      document.getElementById("historial-equipo")?.replaceChildren(document.createTextNode(first?.equipo || "-"));
      document.getElementById("historial-coche")?.replaceChildren(document.createTextNode(first?.coche_numero || "-"));

      // Bloque extra de garantÃ­a
      const extra = document.getElementById("historial-garantia-extra");
      if (extra) {
        const showExtra = !!(first && (first.id_dota || first.ultimo_reparador_nombre || first.resolucion || first.garantia === 'si'));
        extra.style.display = showExtra ? "flex" : "none";
        document.getElementById("historial-id-dota")?.replaceChildren(document.createTextNode(first?.id_dota ?? '-'));
        document.getElementById("historial-ultimo-reparador")?.replaceChildren(document.createTextNode(first?.ultimo_reparador_nombre || '-'));
        document.getElementById("historial-resolucion")?.replaceChildren(document.createTextNode(first?.resolucion || '-'));
      }

      // Cuerpo de la tabla
      if (!Array.isArray(data) || data.length === 0) {
        if (tbody) tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding:10px; color:#666">Sin historial disponible.</td></tr>`;
        return;
      }

      const fmt = (v) => (v == null || v === "") ? "-" : v;
      const fmtFecha = (f) => {
        if (!f) return "-";
        try {
          const d = new Date(f);
          // Formato corto, zona local
          return d.toLocaleDateString('es-AR');
        } catch { return String(f); }
      };
      const fmtHora = (h) => {
        if (!h) return "-";
        // Acepta "07:35:00" o "07:35" o Date
        if (typeof h === 'string') return h.slice(0,5);
        try {
          const d = new Date(`1970-01-01T${h}`);
          return d.toTimeString().slice(0,5);
        } catch { return String(h); }
      };

      const rows = data.map(r => `
        <tr>
          <td>${fmtFecha(r.fecha)}</td>
          <td>${fmt(r.trabajo)}</td>
          <td>${fmtHora(r.hora_inicio)}</td>
          <td>${fmtHora(r.hora_fin)}</td>
          <td>${fmt(r.tecnico)}</td>
          <td>${r.garantia === 'si' ? 'SÃ­' : 'No'}</td>
        </tr>
      `).join("");
      if (tbody) tbody.innerHTML = rows;
    } catch (err) {
      console.error("Error historial:", err);
      const tbody = document.getElementById("tbody-historial");
      if (tbody) tbody.innerHTML = `<tr><td colspan="6" style="text-align:center; padding:10px; color:red">Error al buscar historial.</td></tr>`;
    }
  };

  btn.onclick = buscar;
  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      buscar();
    }
  });
}
